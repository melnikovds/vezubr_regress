{"uid":"401607271a747f40","name":"test_insurance_contract_add_lke[lke]","fullName":"tests.test_insurance_add#test_insurance_contract_add_lke","historyId":"484831e24c4a88dc6410a2c85a088896","time":{"start":1742233130752,"stop":1742233191788,"duration":61036},"description":"ЛКЭ. Тест создания договора страхования: номер и название - № и Н-timestamp, срок - с Сегодня, макс стоимость - 1ккк, бордеро - Да, премия - 0.05%, мин - 50руб, в конце - Удаляем","descriptionHtml":"<p>ЛКЭ. Тест создания договора страхования: номер и название - № и Н-timestamp, срок - с Сегодня, макс стоимость - 1ккк, бордеро - Да, премия - 0.05%, мин - 50руб, в конце - Удаляем</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'insurers_list_button' is not clickable","statusTrace":"self = <pages.sidebar.SideBar object at 0x000001B42E6F65A0>, element_info = {'name': 'insurers_list_button', 'xpath': \"//li[contains(@class, 'ant-menu-item') and contains(., 'Страховые компании')]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cd6fdb35c84a4787a4940ee29de1de2f\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42E885C60>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66D5DC6A5+28789]\nE       \t(No symbol) [0x00007FF66D545B20]\nE       \t(No symbol) [0x00007FF66D3D8F9A]\nE       \t(No symbol) [0x00007FF66D42F346]\nE       \t(No symbol) [0x00007FF66D42F57C]\nE       \t(No symbol) [0x00007FF66D482B17]\nE       \t(No symbol) [0x00007FF66D45736F]\nE       \t(No symbol) [0x00007FF66D47F7E3]\nE       \t(No symbol) [0x00007FF66D457103]\nE       \t(No symbol) [0x00007FF66D41FFC0]\nE       \t(No symbol) [0x00007FF66D421273]\nE       \tGetHandleVerifier [0x00007FF66D921AED+3458237]\nE       \tGetHandleVerifier [0x00007FF66D93829C+3550316]\nE       \tGetHandleVerifier [0x00007FF66D92DB9D+3507565]\nE       \tGetHandleVerifier [0x00007FF66D6A2C6A+841274]\nE       \t(No symbol) [0x00007FF66D5509EF]\nE       \t(No symbol) [0x00007FF66D54CB34]\nE       \t(No symbol) [0x00007FF66D54CCD6]\nE       \t(No symbol) [0x00007FF66D53C119]\nE       \tBaseThreadInitThunk [0x00007FF8BD05E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8BDF1BF6C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8500E0>, <pages.sidebar.SideBar object at 0x000001B42E6F65A0>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание и завершение договоров страхования')\n    @allure.description('ЛКЭ. Тест создания договора страхования: номер и название - № и Н-timestamp, срок - с Сегодня, '\n                        'макс стоимость - 1ккк, бордеро - Да, премия - 0.05%, мин - 50руб, в конце - Удаляем')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_insurance_contract_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку страховщиков\n>       sidebar.move_and_click(move_to=sidebar.directories_hover, click_to=sidebar.insurers_list_button,\n                               do_assert=True, wait=\"lst\")\n\ntests\\test_insurance_add.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:886: in move_and_click\n    self.click_button(click_to, index=click_index, wait_type=click_wait_type, do_assert=do_assert, wait=wait)\nbase\\base_class.py:413: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.sidebar.SideBar object at 0x000001B42E6F65A0>, element_info = {'name': 'insurers_list_button', 'xpath': \"//li[contains(@class, 'ant-menu-item') and contains(., 'Страховые компании')]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'insurers_list_button' is not clickable\n\nbase\\base_class.py:173: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1742228670612,"stop":1742228670613,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_fixture","time":{"start":1742233119350,"stop":1742233130752,"duration":11402},"status":"passed","steps":[{"name":"Start test","time":{"start":1742233120456,"stop":1742233120456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Current url: https://enter.vezubr.com/login","time":{"start":1742233124129,"stop":1742233124129,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_email_input: ***","time":{"start":1742233124153,"stop":1742233124274,"duration":121},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in password_input: ***","time":{"start":1742233124274,"stop":1742233124366,"duration":92},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on login_button","time":{"start":1742233124366,"stop":1742233124451,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on sidebar_button","time":{"start":1742233124451,"stop":1742233130751,"duration":6300},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":6,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"domain","time":{"start":1742233119350,"stop":1742233119350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"ЛКЭ. Тест создания договора страхования: номер и название - № и Н-timestamp, срок - с Сегодня, макс стоимость - 1ккк, бордеро - Да, премия - 0.05%, мин - 50руб, в конце - Удаляем","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'insurers_list_button' is not clickable","statusTrace":"self = <pages.sidebar.SideBar object at 0x000001B42E6F65A0>, element_info = {'name': 'insurers_list_button', 'xpath': \"//li[contains(@class, 'ant-menu-item') and contains(., 'Страховые компании')]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cd6fdb35c84a4787a4940ee29de1de2f\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42E885C60>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66D5DC6A5+28789]\nE       \t(No symbol) [0x00007FF66D545B20]\nE       \t(No symbol) [0x00007FF66D3D8F9A]\nE       \t(No symbol) [0x00007FF66D42F346]\nE       \t(No symbol) [0x00007FF66D42F57C]\nE       \t(No symbol) [0x00007FF66D482B17]\nE       \t(No symbol) [0x00007FF66D45736F]\nE       \t(No symbol) [0x00007FF66D47F7E3]\nE       \t(No symbol) [0x00007FF66D457103]\nE       \t(No symbol) [0x00007FF66D41FFC0]\nE       \t(No symbol) [0x00007FF66D421273]\nE       \tGetHandleVerifier [0x00007FF66D921AED+3458237]\nE       \tGetHandleVerifier [0x00007FF66D93829C+3550316]\nE       \tGetHandleVerifier [0x00007FF66D92DB9D+3507565]\nE       \tGetHandleVerifier [0x00007FF66D6A2C6A+841274]\nE       \t(No symbol) [0x00007FF66D5509EF]\nE       \t(No symbol) [0x00007FF66D54CB34]\nE       \t(No symbol) [0x00007FF66D54CCD6]\nE       \t(No symbol) [0x00007FF66D53C119]\nE       \tBaseThreadInitThunk [0x00007FF8BD05E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8BDF1BF6C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8500E0>, <pages.sidebar.SideBar object at 0x000001B42E6F65A0>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание и завершение договоров страхования')\n    @allure.description('ЛКЭ. Тест создания договора страхования: номер и название - № и Н-timestamp, срок - с Сегодня, '\n                        'макс стоимость - 1ккк, бордеро - Да, премия - 0.05%, мин - 50руб, в конце - Удаляем')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_insurance_contract_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку страховщиков\n>       sidebar.move_and_click(move_to=sidebar.directories_hover, click_to=sidebar.insurers_list_button,\n                               do_assert=True, wait=\"lst\")\n\ntests\\test_insurance_add.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:886: in move_and_click\n    self.click_button(click_to, index=click_index, wait_type=click_wait_type, do_assert=do_assert, wait=wait)\nbase\\base_class.py:413: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.sidebar.SideBar object at 0x000001B42E6F65A0>, element_info = {'name': 'insurers_list_button', 'xpath': \"//li[contains(@class, 'ant-menu-item') and contains(., 'Страховые компании')]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'insurers_list_button' is not clickable\n\nbase\\base_class.py:173: TimeoutException","steps":[{"name":"Move to directories_hover","time":{"start":1742233130752,"stop":1742233131575,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on insurers_list_button","time":{"start":1742233131676,"stop":1742233191788,"duration":60112},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'insurers_list_button' is not clickable\n\n","statusTrace":"  File \"C:\\Users\\l2new\\PycharmProjects\\Vezubr_Autotests\\base\\base_class.py\", line 413, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\l2new\\PycharmProjects\\Vezubr_Autotests\\base\\base_class.py\", line 173, in get_element\n    raise TimeoutException(message)\n","steps":[{"name":"Element 'insurers_list_button' is not clickable","time":{"start":1742233191788,"stop":1742233191788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true},{"name":"Screen taken: tests_test_insurance_add.py_test_insurance_contract_add_lke[lke]_2025.03.17.17.39.51.png","time":{"start":1742233192247,"stop":1742233192249,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"84f507fa60147276","name":"Screenshot","source":"84f507fa60147276.png","type":"image/png","size":1924434}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":4,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"base_fixture::0","time":{"start":1742233192249,"stop":1742233194439,"duration":2190},"status":"passed","steps":[{"name":"Test finish","time":{"start":1742233192249,"stop":1742233194439,"duration":2190},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"Smoke test"},{"name":"feature","value":"Создание и завершение договоров страхования"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_insurance_add"},{"name":"host","value":"FirexPC"},{"name":"thread","value":"22408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_insurance_add"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_fixture","value":"'lke'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"800fed6665f0fbc2","status":"passed","time":{"start":1741544394100,"stop":1741544404715,"duration":10615}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"401607271a747f40.json","parameterValues":["'lke'"]}