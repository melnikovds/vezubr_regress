{"name": "test_add_new_ftl_lkz_lke[lkz]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=136.0.7103.93)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7F7E75335+78597]\n\tGetHandleVerifier [0x00007FF7F7E75390+78688]\n\t(No symbol) [0x00007FF7F7C291AA]\n\t(No symbol) [0x00007FF7F7C01B63]\n\t(No symbol) [0x00007FF7F7CAEB6E]\n\t(No symbol) [0x00007FF7F7CCEBB2]\n\t(No symbol) [0x00007FF7F7CA6EC3]\n\t(No symbol) [0x00007FF7F7C703F8]\n\t(No symbol) [0x00007FF7F7C71163]\n\tGetHandleVerifier [0x00007FF7F811EEED+2870973]\n\tGetHandleVerifier [0x00007FF7F8119698+2848360]\n\tGetHandleVerifier [0x00007FF7F8136973+2967875]\n\tGetHandleVerifier [0x00007FF7F7E9017A+188746]\n\tGetHandleVerifier [0x00007FF7F7E9845F+222255]\n\tGetHandleVerifier [0x00007FF7F7E7D2B4+111236]\n\tGetHandleVerifier [0x00007FF7F7E7D462+111666]\n\tGetHandleVerifier [0x00007FF7F7E63589+5465]\n\tBaseThreadInitThunk [0x00007FFAFEB2E8D7+23]\n\tRtlUserThreadStart [0x00007FFAFFD7C5DC+44]", "trace": "request = <SubRequest 'base_fixture' for <Function test_add_new_ftl_lkz_lke[lkz]>>\ndomain = 'com'\n\n    @pytest.fixture\n    def base_fixture(request, domain):\n        # Проверяем, используется ли отчет Allure\n        allure_dir = request.config.getoption(\"--alluredir\", default=None)\n    \n        # Получаем параметр из теста, который определяет тип теста и роль\n        role = request.param\n    \n        # Логика для выбора базового теста\n        if role == 'without_login':\n            base, login = base_test_without_login(domain)\n            base.allure_dir = allure_dir  # Устанавливаем директорию в base, если используется Allure\n            yield base, login\n        elif role == 'via_link':\n            base, login = base_test_with_login_via_link(domain)\n            base.allure_dir = allure_dir\n            yield base, login\n        else:\n>           base, sidebar = base_test_with_login(domain, role)\n\ntests\\conftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\base_test.py:10: in base_test_with_login\n    login.authorization(role)\npages\\login_page.py:57: in authorization\n    self.driver.maximize_window()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A131C33EC0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...F7E63589+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAFEB2E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFAFFD7C5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=136.0.7103.93)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F7E75335+78597]\nE       \tGetHandleVerifier [0x00007FF7F7E75390+78688]\nE       \t(No symbol) [0x00007FF7F7C291AA]\nE       \t(No symbol) [0x00007FF7F7C01B63]\nE       \t(No symbol) [0x00007FF7F7CAEB6E]\nE       \t(No symbol) [0x00007FF7F7CCEBB2]\nE       \t(No symbol) [0x00007FF7F7CA6EC3]\nE       \t(No symbol) [0x00007FF7F7C703F8]\nE       \t(No symbol) [0x00007FF7F7C71163]\nE       \tGetHandleVerifier [0x00007FF7F811EEED+2870973]\nE       \tGetHandleVerifier [0x00007FF7F8119698+2848360]\nE       \tGetHandleVerifier [0x00007FF7F8136973+2967875]\nE       \tGetHandleVerifier [0x00007FF7F7E9017A+188746]\nE       \tGetHandleVerifier [0x00007FF7F7E9845F+222255]\nE       \tGetHandleVerifier [0x00007FF7F7E7D2B4+111236]\nE       \tGetHandleVerifier [0x00007FF7F7E7D462+111666]\nE       \tGetHandleVerifier [0x00007FF7F7E63589+5465]\nE       \tBaseThreadInitThunk [0x00007FFAFEB2E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFAFFD7C5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "ЛКЗ, Тестирование: Создание ФТЛ заявки - город, грузоперевозка, новое ГМ, публикация на ЛКЭ", "parameters": [{"name": "base_fixture", "value": "'lkz'"}], "start": 1747382454137, "stop": 1747382454137, "uuid": "0eb0c623-f809-4b65-9d2f-005c07dcec9d", "historyId": "0c50ed6e148e192d63542dfb9281022a", "testCaseId": "b0685753872db2ecdb854e1c7fdf019b", "fullName": "tests.test_add_new_cdr#test_add_new_ftl_lkz_lke", "labels": [{"name": "feature", "value": "Создание заявки на доставку груза"}, {"name": "story", "value": "smoke"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_new_cdr"}, {"name": "host", "value": "FirexPC"}, {"name": "thread", "value": "7512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_new_cdr"}]}