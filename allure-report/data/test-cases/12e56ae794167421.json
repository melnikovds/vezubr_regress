{"uid":"12e56ae794167421","name":"test_sorting_orders_lkz[lkz]","fullName":"tests.test_sorting#test_sorting_orders_lkz","historyId":"20e839c9145049f127644043cf70ab7f","time":{"start":1742236490241,"stop":1742236554334,"duration":64093},"description":"ЛКЗ. Тест сортировок списков рейсов по всем столбцам","descriptionHtml":"<p>ЛКЗ. Тест сортировок списков рейсов по всем столбцам</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'sorting_button index 1' is not clickable","statusTrace":"self = <base.base_class.Base object at 0x000001B42E8506B0>, element_info = {'name': 'sorting_button index 1', 'xpath': \"(//span[@class='ant-table-column-sorter']/div[@title='Сортировка'])[1]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7ced471e003e71f1bc895969d3dcae15\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42EABC0E0>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8506B0>, <pages.sidebar.SideBar object at 0x000001B42E8507D0>), domain = 'com'\n\n    @allure.story(\"Extended test\")\n    @allure.feature('Сортировки')\n    @allure.description('ЛКЗ. Тест сортировок списков рейсов по всем столбцам')\n    @pytest.mark.parametrize('base_fixture', ['lkz'], indirect=True)  # Параметризация роли\n    def test_sorting_orders_lkz(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку FTL рейсов\n        sidebar.move_and_click(move_to=sidebar.order_hover, click_to=sidebar.ftl_list_button,\n                               do_assert=True, wait=\"lst\")\n        # Клик по кнопке сброса фильтров\n        base.click_button(base.reset_button, wait=\"lst\")\n    \n        # Последовательный клик по всем кнопкам сортировки всех столбцов\n>       base.click_multiple_buttons(base.sorting_button, num_buttons=20, num_clicks=3, wait=\"lst\")\n\ntests\\test_sorting.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:1009: in click_multiple_buttons\n    element_info = self.get_element(element_locator, wait_type=wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.base_class.Base object at 0x000001B42E8506B0>, element_info = {'name': 'sorting_button index 1', 'xpath': \"(//span[@class='ant-table-column-sorter']/div[@title='Сортировка'])[1]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'sorting_button index 1' is not clickable\n\nbase\\base_class.py:173: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1742228670612,"stop":1742228670613,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"domain","time":{"start":1742236478858,"stop":1742236478858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_fixture","time":{"start":1742236478858,"stop":1742236490241,"duration":11383},"status":"passed","steps":[{"name":"Start test","time":{"start":1742236479965,"stop":1742236479965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Current url: https://enter.vezubr.com/login","time":{"start":1742236483600,"stop":1742236483601,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_email_input: ***","time":{"start":1742236483631,"stop":1742236483776,"duration":145},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in password_input: ***","time":{"start":1742236483776,"stop":1742236483890,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on login_button","time":{"start":1742236483890,"stop":1742236483987,"duration":97},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on sidebar_button","time":{"start":1742236483987,"stop":1742236490239,"duration":6252},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":6,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"ЛКЗ. Тест сортировок списков рейсов по всем столбцам","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'sorting_button index 1' is not clickable","statusTrace":"self = <base.base_class.Base object at 0x000001B42E8506B0>, element_info = {'name': 'sorting_button index 1', 'xpath': \"(//span[@class='ant-table-column-sorter']/div[@title='Сортировка'])[1]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7ced471e003e71f1bc895969d3dcae15\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42EABC0E0>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8506B0>, <pages.sidebar.SideBar object at 0x000001B42E8507D0>), domain = 'com'\n\n    @allure.story(\"Extended test\")\n    @allure.feature('Сортировки')\n    @allure.description('ЛКЗ. Тест сортировок списков рейсов по всем столбцам')\n    @pytest.mark.parametrize('base_fixture', ['lkz'], indirect=True)  # Параметризация роли\n    def test_sorting_orders_lkz(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку FTL рейсов\n        sidebar.move_and_click(move_to=sidebar.order_hover, click_to=sidebar.ftl_list_button,\n                               do_assert=True, wait=\"lst\")\n        # Клик по кнопке сброса фильтров\n        base.click_button(base.reset_button, wait=\"lst\")\n    \n        # Последовательный клик по всем кнопкам сортировки всех столбцов\n>       base.click_multiple_buttons(base.sorting_button, num_buttons=20, num_clicks=3, wait=\"lst\")\n\ntests\\test_sorting.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:1009: in click_multiple_buttons\n    element_info = self.get_element(element_locator, wait_type=wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.base_class.Base object at 0x000001B42E8506B0>, element_info = {'name': 'sorting_button index 1', 'xpath': \"(//span[@class='ant-table-column-sorter']/div[@title='Сортировка'])[1]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'sorting_button index 1' is not clickable\n\nbase\\base_class.py:173: TimeoutException","steps":[{"name":"Move to order_hover","time":{"start":1742236490241,"stop":1742236490723,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on ftl_list_button","time":{"start":1742236490824,"stop":1742236492379,"duration":1555},"status":"passed","steps":[{"name":"Assert \"Рейсы\" == \"Рейсы\"","time":{"start":1742236492379,"stop":1742236492379,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on reset_button","time":{"start":1742236492379,"stop":1742236494068,"duration":1689},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Element 'sorting_button index 1' is not clickable","time":{"start":1742236554334,"stop":1742236554334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Screen taken: tests_test_sorting.py_test_sorting_orders_lkz[lkz]_2025.03.17.18.35.54.png","time":{"start":1742236554571,"stop":1742236554572,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"6d10cab074eb674c","name":"Screenshot","source":"6d10cab074eb674c.png","type":"image/png","size":234370}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":6,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"base_fixture::0","time":{"start":1742236554573,"stop":1742236556761,"duration":2188},"status":"passed","steps":[{"name":"Test finish","time":{"start":1742236554573,"stop":1742236556761,"duration":2188},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"Сортировки"},{"name":"story","value":"Extended test"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_sorting"},{"name":"host","value":"FirexPC"},{"name":"thread","value":"22408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_sorting"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_fixture","value":"'lkz'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7462f15f1555cec3","status":"passed","time":{"start":1741548031844,"stop":1741548189738,"duration":157894}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"12e56ae794167421.json","parameterValues":["'lkz'"]}