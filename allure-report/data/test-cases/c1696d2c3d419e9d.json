{"uid":"c1696d2c3d419e9d","name":"test_registration_new_lkp[via_link]","fullName":"tests.test_registration#test_registration_new_lkp","historyId":"3c90bf6b153f19dd8b4ca046709cbb0a","time":{"start":1742235286235,"stop":1742235393500,"duration":107265},"description":"Тест регистрации личного кабинета Перевозчика: регистрация - По ссылке Экс, тлф. - 98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, пользователь - Регресс ПВ, после создания заходим в ЛК и проверяем ИНН, далее заходим в ЛК Экс и принимаем ПВ в контур Экс.,","descriptionHtml":"<p>Тест регистрации личного кабинета Перевозчика: регистрация - По ссылке Экс, тлф. - 98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, пользователь - Регресс ПВ, после создания заходим в ЛК и проверяем ИНН, далее заходим в ЛК Экс и принимаем ПВ в контур Экс.,</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'accept_button' is not clickable","statusTrace":"self = <pages.producers_list_page.ProducersList object at 0x000001B42E91FBF0>, element_info = {'name': 'accept_button', 'xpath': \"(//button[.//span[text()='Принять']])[2]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"02746820ed3721bbe1fca521c81b711d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42EA6C360>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8886B0>, <pages.login_page.Login object at 0x000001B42E888170>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Регистрация личного кабинета')\n    @allure.description('Тест регистрации личного кабинета Перевозчика: регистрация - По ссылке Экс, тлф. - '\n                        '98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, '\n                        'пользователь - Регресс ПВ, после создания заходим в ЛК и проверяем ИНН, '\n                        'далее заходим в ЛК Экс и принимаем ПВ в контур Экс.,')\n    @pytest.mark.parametrize('base_fixture', ['via_link'], indirect=True)\n    def test_registration_new_lkp(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, login = base_fixture\n    \n        reg = Registration(base.driver)\n        # Переход к регистрации нового аккаунта\n        reg.click_button(reg.registration_new_account)\n        # Выбор типа регистрации - Перевозчик\n        reg.click_button(reg.producer_button)\n        phone = \"98\" + reg.get_timestamp(eight=True)\n        # Ввод номера телефона\n        reg.input_in_field(reg.phone_input, phone, click_first=True)\n        # Принятие политики конфиденциальности\n        reg.click_button(reg.privacy_policy_checkbox)\n        # Запрос кода подтверждения\n        reg.click_button(reg.get_code_button)\n    \n        sms = SmsCenter(base.driver)\n        # Открытие нового окна для получения кода подтверждения\n        sms.driver.execute_script(\"window.open(arguments[0]);\", sms.sms_url)\n        WebDriverWait(base.driver, 60).until(lambda d: len(d.window_handles) > 1)\n        windows = base.driver.window_handles\n        base.driver.switch_to.window(windows[1])\n    \n        # Ввод логина и пароля для доступа к СМС центру\n        sms.input_in_field(sms.sms_login_input, sms_center[\"login\"], safe=True)\n        sms.input_in_field(sms.sms_password_input, sms_center[\"password\"], safe=True)\n        # Переход к деталям сообщений\n        sms.click_button(sms.sms_login_button)\n        sms.click_button(sms.detailing_button)\n    \n        # Получение кода подтверждения\n        code = sms.get_confirmation_code(phone)\n    \n        base.driver.switch_to.window(windows[0])\n    \n        # Ввод кода подтверждения\n        reg.input_in_field(reg.code_input, code)\n        reg.click_button(reg.continue_button)\n    \n        email = f\"E{base.get_timestamp()}@mail.ru\"\n        # Ввод email пользователя\n        reg.input_in_field(reg.email_input, email)\n    \n        # Ввод данных пользователя\n        reg.input_in_field(reg.user_name_input, \"ГВ\")\n        reg.input_in_field(reg.user_surname_input, \"Регресс\")\n        reg.input_in_field(reg.password_input, base_password[\"password\"], safe=True)\n        reg.input_in_field(reg.repeat_password_input, base_password[\"password\"], safe=True)\n    \n        # Генерация и ввод ИНН\n        inn = reg.generate_inn(\"entity\")\n        reg.input_in_field(reg.inn_input, inn, click_first=True)\n        # Завершение регистрации\n        reg.click_button(reg.complete_button, do_assert=True)\n        reg.click_button(reg.ok_button)\n    \n        # Вход в личный кабинет\n        login.input_in_field(login.user_email_input, email, safe=True)\n        login.input_in_field(login.password_input, base_password[\"password\"], safe=True)\n        login.click_button(login.login_button)\n        # Проверка ИНН пользователя\n        login.assert_element_text(login.assert_inn, reference_value=inn)\n    \n        # Выход из личного кабинета\n        sidebar = SideBar(base.driver)\n        sidebar.click_button(sidebar.exit_button)\n    \n        # Вход в личный кабинет Экспедитора\n        login.input_in_field(login.user_email_input, base_lke[\"email\"], safe=True)\n        login.input_in_field(login.password_input, base_lke[\"password\"], safe=True)\n        login.click_button(login.login_button)\n    \n        # Принятие Перевозчика в контур Экспедитора\n        sidebar.click_button(sidebar.sidebar_button)\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.producers_list_button,\n                               do_assert=True, wait=\"lst\")\n        producer_list = ProducersList(base.driver)\n>       producer_list.click_button(producer_list.accept_button, wait=\"lst\")\n\ntests\\test_registration.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:413: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.producers_list_page.ProducersList object at 0x000001B42E91FBF0>, element_info = {'name': 'accept_button', 'xpath': \"(//button[.//span[text()='Принять']])[2]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'accept_button' is not clickable\n\nbase\\base_class.py:173: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742228670612,"stop":1742228670613,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_fixture","time":{"start":1742235281526,"stop":1742235286235,"duration":4709},"status":"passed","steps":[{"name":"Start test","time":{"start":1742235282623,"stop":1742235282623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Current url: https://enter.vezubr.com/contour-join?contourCode=DgzHgntfhz","time":{"start":1742235286205,"stop":1742235286205,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"domain","time":{"start":1742235281526,"stop":1742235281526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"Тест регистрации личного кабинета Перевозчика: регистрация - По ссылке Экс, тлф. - 98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, пользователь - Регресс ПВ, после создания заходим в ЛК и проверяем ИНН, далее заходим в ЛК Экс и принимаем ПВ в контур Экс.,","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'accept_button' is not clickable","statusTrace":"self = <pages.producers_list_page.ProducersList object at 0x000001B42E91FBF0>, element_info = {'name': 'accept_button', 'xpath': \"(//button[.//span[text()='Принять']])[2]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition(locator))\n\nbase\\base_class.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"02746820ed3721bbe1fca521c81b711d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001B42EA6C360>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001B42E8886B0>, <pages.login_page.Login object at 0x000001B42E888170>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Регистрация личного кабинета')\n    @allure.description('Тест регистрации личного кабинета Перевозчика: регистрация - По ссылке Экс, тлф. - '\n                        '98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, '\n                        'пользователь - Регресс ПВ, после создания заходим в ЛК и проверяем ИНН, '\n                        'далее заходим в ЛК Экс и принимаем ПВ в контур Экс.,')\n    @pytest.mark.parametrize('base_fixture', ['via_link'], indirect=True)\n    def test_registration_new_lkp(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, login = base_fixture\n    \n        reg = Registration(base.driver)\n        # Переход к регистрации нового аккаунта\n        reg.click_button(reg.registration_new_account)\n        # Выбор типа регистрации - Перевозчик\n        reg.click_button(reg.producer_button)\n        phone = \"98\" + reg.get_timestamp(eight=True)\n        # Ввод номера телефона\n        reg.input_in_field(reg.phone_input, phone, click_first=True)\n        # Принятие политики конфиденциальности\n        reg.click_button(reg.privacy_policy_checkbox)\n        # Запрос кода подтверждения\n        reg.click_button(reg.get_code_button)\n    \n        sms = SmsCenter(base.driver)\n        # Открытие нового окна для получения кода подтверждения\n        sms.driver.execute_script(\"window.open(arguments[0]);\", sms.sms_url)\n        WebDriverWait(base.driver, 60).until(lambda d: len(d.window_handles) > 1)\n        windows = base.driver.window_handles\n        base.driver.switch_to.window(windows[1])\n    \n        # Ввод логина и пароля для доступа к СМС центру\n        sms.input_in_field(sms.sms_login_input, sms_center[\"login\"], safe=True)\n        sms.input_in_field(sms.sms_password_input, sms_center[\"password\"], safe=True)\n        # Переход к деталям сообщений\n        sms.click_button(sms.sms_login_button)\n        sms.click_button(sms.detailing_button)\n    \n        # Получение кода подтверждения\n        code = sms.get_confirmation_code(phone)\n    \n        base.driver.switch_to.window(windows[0])\n    \n        # Ввод кода подтверждения\n        reg.input_in_field(reg.code_input, code)\n        reg.click_button(reg.continue_button)\n    \n        email = f\"E{base.get_timestamp()}@mail.ru\"\n        # Ввод email пользователя\n        reg.input_in_field(reg.email_input, email)\n    \n        # Ввод данных пользователя\n        reg.input_in_field(reg.user_name_input, \"ГВ\")\n        reg.input_in_field(reg.user_surname_input, \"Регресс\")\n        reg.input_in_field(reg.password_input, base_password[\"password\"], safe=True)\n        reg.input_in_field(reg.repeat_password_input, base_password[\"password\"], safe=True)\n    \n        # Генерация и ввод ИНН\n        inn = reg.generate_inn(\"entity\")\n        reg.input_in_field(reg.inn_input, inn, click_first=True)\n        # Завершение регистрации\n        reg.click_button(reg.complete_button, do_assert=True)\n        reg.click_button(reg.ok_button)\n    \n        # Вход в личный кабинет\n        login.input_in_field(login.user_email_input, email, safe=True)\n        login.input_in_field(login.password_input, base_password[\"password\"], safe=True)\n        login.click_button(login.login_button)\n        # Проверка ИНН пользователя\n        login.assert_element_text(login.assert_inn, reference_value=inn)\n    \n        # Выход из личного кабинета\n        sidebar = SideBar(base.driver)\n        sidebar.click_button(sidebar.exit_button)\n    \n        # Вход в личный кабинет Экспедитора\n        login.input_in_field(login.user_email_input, base_lke[\"email\"], safe=True)\n        login.input_in_field(login.password_input, base_lke[\"password\"], safe=True)\n        login.click_button(login.login_button)\n    \n        # Принятие Перевозчика в контур Экспедитора\n        sidebar.click_button(sidebar.sidebar_button)\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.producers_list_button,\n                               do_assert=True, wait=\"lst\")\n        producer_list = ProducersList(base.driver)\n>       producer_list.click_button(producer_list.accept_button, wait=\"lst\")\n\ntests\\test_registration.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:413: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.producers_list_page.ProducersList object at 0x000001B42E91FBF0>, element_info = {'name': 'accept_button', 'xpath': \"(//button[.//span[text()='Принять']])[2]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            # Определение типа локаторов и его значения\n            if 'xpath' in element_info:\n                locator = (By.XPATH, element_info['xpath'])\n            elif 'css' in element_info:\n                locator = (By.CSS_SELECTOR, element_info['css'])\n            else:\n                raise ValueError(\"Не указан ни XPath, ни CSS-селектор для элемента\")\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition(locator))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition(locator))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'accept_button' is not clickable\n\nbase\\base_class.py:173: TimeoutException","steps":[{"name":"Click on registration_new_account","time":{"start":1742235286235,"stop":1742235286355,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on producer_button","time":{"start":1742235286356,"stop":1742235286478,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click and Input in phone_input: 9817181446","time":{"start":1742235286478,"stop":1742235286667,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on privacy_policy_checkbox","time":{"start":1742235286667,"stop":1742235286780,"duration":113},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on get_code_button","time":{"start":1742235286780,"stop":1742235286866,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in sms_login_input: ***","time":{"start":1742235286925,"stop":1742235291674,"duration":4749},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in sms_password_input: ***","time":{"start":1742235291674,"stop":1742235291800,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on sms_login_button","time":{"start":1742235291800,"stop":1742235291917,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on detailing_button","time":{"start":1742235291917,"stop":1742235294607,"duration":2690},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on refresh_button","time":{"start":1742235300060,"stop":1742235300212,"duration":152},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on refresh_button","time":{"start":1742235305307,"stop":1742235305432,"duration":125},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on refresh_button","time":{"start":1742235310549,"stop":1742235310689,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on refresh_button","time":{"start":1742235315784,"stop":1742235315907,"duration":123},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in code_input: 7656","time":{"start":1742235316487,"stop":1742235316576,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on continue_button","time":{"start":1742235316576,"stop":1742235316662,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in email_input: E20250317181516@mail.ru","time":{"start":1742235316662,"stop":1742235317297,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_name_input: ГВ","time":{"start":1742235317297,"stop":1742235317366,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_surname_input: Регресс","time":{"start":1742235317366,"stop":1742235317454,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in password_input: ***","time":{"start":1742235317455,"stop":1742235317537,"duration":82},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in repeat_password_input: ***","time":{"start":1742235317537,"stop":1742235317617,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click and Input in inn_input: 3362424052","time":{"start":1742235317617,"stop":1742235317766,"duration":149},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on complete_button","time":{"start":1742235317766,"stop":1742235318927,"duration":1161},"status":"passed","steps":[{"name":"Assert \"Вы успешно зарегистрировались\" == \"Вы успешно зарегистрировались\"","time":{"start":1742235318927,"stop":1742235318927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on calendar_ok_button","time":{"start":1742235318927,"stop":1742235319378,"duration":451},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_email_input: ***","time":{"start":1742235319378,"stop":1742235319486,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in password_input: ***","time":{"start":1742235319486,"stop":1742235319554,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on login_button","time":{"start":1742235319554,"stop":1742235319636,"duration":82},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Assert \"3362424052\" == \"3362424052\"","time":{"start":1742235325167,"stop":1742235325167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on exit_button","time":{"start":1742235325167,"stop":1742235325273,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in user_email_input: ***","time":{"start":1742235325273,"stop":1742235325471,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Input in password_input: ***","time":{"start":1742235325471,"stop":1742235325552,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on login_button","time":{"start":1742235325554,"stop":1742235325619,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on sidebar_button","time":{"start":1742235325619,"stop":1742235331227,"duration":5608},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Move to contractor_hover","time":{"start":1742235331227,"stop":1742235331588,"duration":361},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on producers_list_button","time":{"start":1742235331689,"stop":1742235333084,"duration":1395},"status":"passed","steps":[{"name":"Assert \"Список контрагентов\" == \"Список контрагентов\"","time":{"start":1742235333084,"stop":1742235333084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Click on accept_button","time":{"start":1742235333084,"stop":1742235393500,"duration":60416},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element 'accept_button' is not clickable\n\n","statusTrace":"  File \"C:\\Users\\l2new\\PycharmProjects\\Vezubr_Autotests\\base\\base_class.py\", line 413, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\l2new\\PycharmProjects\\Vezubr_Autotests\\base\\base_class.py\", line 173, in get_element\n    raise TimeoutException(message)\n","steps":[{"name":"Element 'accept_button' is not clickable","time":{"start":1742235393500,"stop":1742235393500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true},{"name":"Screen taken: tests_test_registration.py_test_registration_new_lkp[via_link]_2025.03.17.18.16.33.png","time":{"start":1742235393770,"stop":1742235393772,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"f466f59123c535a8","name":"Screenshot","source":"f466f59123c535a8.png","type":"image/png","size":204357}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":39,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"base_fixture::0","time":{"start":1742235393773,"stop":1742235396006,"duration":2233},"status":"passed","steps":[{"name":"Test finish","time":{"start":1742235393773,"stop":1742235396006,"duration":2233},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"Smoke test"},{"name":"feature","value":"Регистрация личного кабинета"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_registration"},{"name":"host","value":"FirexPC"},{"name":"thread","value":"22408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_registration"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_fixture","value":"'via_link'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3d3d74720893b4fa","status":"broken","statusDetails":"ValueError: Код подтверждения для номера +79809185617 не найден после 12 попыток.","time":{"start":1741546577260,"stop":1741546648399,"duration":71139}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c1696d2c3d419e9d.json","parameterValues":["'via_link'"]}